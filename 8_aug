@GetMapping("/ping")
	public String ping() {
		return "pong";
	}

	@GetMapping("/hello")
	public String hello(@RequestParam(value = "name", defaultValue = "World") String name) {
		return String.format("Hello %s!", name);
	}

	@GetMapping("/sum")
	public int sum(@RequestParam(value = "number1") int number1, @RequestParam(value = "number2") int number2){
		return number1 + number2;
	}

	@GetMapping("/multiply")
	public int multiply(@RequestParam(value = "number1") int number1, @RequestParam(value = "number2") int number2){
		return number1 * number2;
	}

	@GetMapping("/mycats")
	public String[] mycats(){
		String[] mycats = {"Bonita", "Elsa"};
		return mycats;
	}

	@GetMapping("/team12/member")
	public String getTeamMember(@RequestParam(value = "index", defaultValue = "0") int index) {
		String[] team12 = {"Gita", "Daiga", "Heili", "Christin"};
		if (index >= 0 && index < team12.length) {
			return team12[index];
		} else {
			return "Index out of bounds";
		}
	}

	@GetMapping("/getBook")//localhost:8080/getBook
	public Book getBook(){
		var book = new Book();
		book.title = "book title";
		book.author = "book author";

		return book;
	}

	@PostMapping("/postexample")
	public Book addBook(@RequestBody Book book){
		book.title = book.title.toUpperCase();
		return book;
	}

	@PostMapping("/authorize")
	public User authorize(@RequestBody Credentials credentials){ // username + password
		if(credentials.username.equals("okklv") && credentials.password.equals("Password123")){
			var user = new User();
			user.name = "Oskars";
			return user;
		}
		return null;
	}
